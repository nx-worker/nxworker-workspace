name: CI

on:
  push:
    branches:
      - main
  pull_request:
  workflow_dispatch:

permissions:
  contents: read # default to read-only access for repository contents

jobs:
  build:
    runs-on: ubuntu-24.04-arm # Linux arm64
    steps:
      - uses: actions/checkout@v5
        with:
          # We need to fetch all branches and commits so that Nx affected has a base to compare against.
          fetch-depth: 0
          filter: tree:0 # Optional, but recommended: reduce the size of the checkout with tree filtering, see https://github.blog/open-source/git/get-up-to-speed-with-partial-clone-and-shallow-clone/

      - uses: ./.github/actions/set-nx-shas

      - uses: ./.github/actions/setup-node-and-install

      # Build all projects to create a complete build artifact for downstream e2e jobs.
      # This ensures e2e jobs always have all required build outputs regardless of which projects are affected.
      - run: npx nx run-many -t build --output-style=static

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-artifacts
          path: dist/
          retention-days: 7
          if-no-files-found: error

  format:
    runs-on: ubuntu-24.04-arm # Linux arm64
    steps:
      - uses: actions/checkout@v5
        if: ${{ github.event_name == 'pull_request' }}
        with:
          # We need to fetch all branches and commits so that Nx affected has a base to compare against.
          fetch-depth: 0
          filter: tree:0 # Optional, but recommended: reduce the size of the checkout with tree filtering, see https://github.blog/open-source/git/get-up-to-speed-with-partial-clone-and-shallow-clone/

      - uses: ./.github/actions/set-nx-shas
        if: ${{ github.event_name == 'pull_request' }}

      - uses: ./.github/actions/setup-node-and-install
        if: ${{ github.event_name == 'pull_request' }}

      - name: '[PR] Check formatting'
        if: ${{ github.event_name == 'pull_request' }}
        run: npx nx format:check

  lint:
    runs-on: ubuntu-24.04-arm # Linux arm64
    steps:
      - uses: actions/checkout@v5
        with:
          # We need to fetch all branches and commits so that Nx affected has a base to compare against.
          fetch-depth: 0
          filter: tree:0 # Optional, but recommended: reduce the size of the checkout with tree filtering, see https://github.blog/open-source/git/get-up-to-speed-with-partial-clone-and-shallow-clone/

      - uses: ./.github/actions/set-nx-shas

      - uses: ./.github/actions/setup-node-and-install

      # Nx Affected runs only tasks affected by the changes in this PR/commit. Learn more: https://nx.dev/ci/features/affected
      - run: npx nx affected -t lint --output-style=static

  test:
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: ubuntu-latest
            node-version: 18
          - os: ubuntu-latest
            node-version: 20
          - os: ubuntu-24.04-arm # Linux
            node-version: 22
          - os: windows-latest # Windows
            node-version: 22
          - os: macos-latest # macOS
            node-version: 22
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v5
        with:
          # We need to fetch all branches and commits so that Nx affected has a base to compare against.
          fetch-depth: 0
          filter: tree:0 # Optional, but recommended: reduce the size of the checkout with tree filtering, see https://github.blog/open-source/git/get-up-to-speed-with-partial-clone-and-shallow-clone/

      - uses: ./.github/actions/set-nx-shas

      - uses: ./.github/actions/setup-node-and-install
        with:
          node-version: ${{ matrix.node-version }}

      # Nx Affected runs only tasks affected by the changes in this PR/commit. Learn more: https://nx.dev/ci/features/affected
      # Exclude benchmark tests (*.bench.spec.ts and performance-benchmark.spec.ts) from regular test runs
      # Run with coverage on ubuntu-24.04-arm with Node 22 to enforce coverage thresholds
      - name: Run tests
        shell: bash
        run: |
          COVERAGE_FLAG=""
          if [[ "${{ matrix.os }}" == "ubuntu-24.04-arm" && "${{ matrix.node-version }}" == "22" ]]; then
            COVERAGE_FLAG="--coverage"
          fi
          npx nx affected -t test --configuration=ci $COVERAGE_FLAG --output-style=static -- --testPathIgnorePatterns='benchmarks|performance-benchmark'

  # Summary check that aggregates all test matrix results for branch protection
  check-test:
    needs: test
    if: always()
    runs-on: ubuntu-24.04-arm
    steps:
      - name: Check test matrix results
        run: |
          # Check the overall result of the test job (which includes all matrix jobs)
          result="${{ needs.test.result }}"
          echo "Test job result: $result"
          if [ "$result" == "success" ]; then
            echo "All test matrix jobs succeeded"
            exit 0
          else
            echo "One or more test matrix jobs failed or were cancelled"
            exit 1
          fi

  # Determine the GitHub runner image matrix for the e2e job based on event type
  # and branch.
  # Merge to main and manual workflow_dispatch results in the full matrix while
  # PRs and workflow_dispatch for chore/update-dependencies (dependency-update.yml)
  # use the fast matrix
  set-e2e-matrix:
    runs-on: ubuntu-24.04-arm
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
    env:
      # `include` as in `matrix.strategy.include`
      MATRIX_FAST: |
        include:
          - os: ubuntu-24.04-arm
      MATRIX_FULL: |
        include:
          - os: ubuntu-latest
          - os: windows-latest
          - os: ubuntu-24.04-arm
          - os: windows-11-arm
          - os: macos-15-intel
          - os: macos-latest
    steps:
      - id: set-matrix
        name: Set matrix output property
        shell: bash
        run: |
          # Set the matrix output property

          # Fail the step on the first error and propagate pipeline failures
          set -eo pipefail

          # Normalize the Git ref to a plain branch name so workflow_dispatch runs
          # can opt into the fast matrix when launched against chore/update-dependencies
          REF_NAME="$GITHUB_REF"

          # Is branch name?
          if [[ "$REF_NAME" == refs/heads/* ]]; then
            REF_NAME="${REF_NAME#refs/heads/}"
          fi

          # Select the matrix YAML based on event type and branch
          if [[ "$GITHUB_EVENT_NAME" == "pull_request" ]]; then
            printf '%s\n' "$MATRIX_FAST" > matrix.yml
          elif [[ "$GITHUB_EVENT_NAME" == "workflow_dispatch" && "$REF_NAME" == "chore/update-dependencies" ]]; then
            printf '%s\n' "$MATRIX_FAST" > matrix.yml
          else
            printf '%s\n' "$MATRIX_FULL" > matrix.yml
          fi

          # Convert the chosen YAML matrix to JSON using js-yaml so the e2e job can consume it
          MATRIX_JSON=$(npx --yes js-yaml matrix.yml | tr -d '\n')
          # Publish the JSON matrix via step outputs for downstream jobs
          echo "matrix=$MATRIX_JSON" >> "$GITHUB_OUTPUT"

  e2e:
    needs:
      - build
      - set-e2e-matrix
    strategy:
      matrix: ${{ fromJson(needs.set-e2e-matrix.outputs.matrix) }}
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v5
        with:
          # We need to fetch all branches and commits so that Nx affected has a base to compare against.
          fetch-depth: 0
          filter: tree:0 # Optional, but recommended: reduce the size of the checkout with tree filtering, see https://github.blog/open-source/git/get-up-to-speed-with-partial-clone-and-shallow-clone/

      - uses: ./.github/actions/set-nx-shas

      - uses: ./.github/actions/setup-node-and-install

      - name: Download build artifacts
        id: download-artifacts
        uses: actions/download-artifact@v4
        continue-on-error: true
        with:
          name: build-artifacts
          path: dist/

      # Nx Affected runs only tasks affected by the changes in this PR/commit. Learn more: https://nx.dev/ci/features/affected
      # Always exclude task dependencies (--exclude-task-dependencies) because the build job already built all projects
      # and uploaded artifacts. This prevents rebuilding dependencies in each e2e matrix job, saving time
      # and ensuring all e2e jobs use the exact same build artifacts for consistency.
      # Exclude performance-benchmark.spec.ts from regular e2e runs (run separately in benchmark job)
      - name: Run e2e tests
        shell: bash
        run: npx nx affected -t e2e --configuration=ci --exclude-task-dependencies --output-style=static -- --testPathIgnorePatterns='performance-benchmark'

  # Summary check that aggregates all e2e matrix results for branch protection
  check-e2e:
    needs: e2e
    if: always()
    runs-on: ubuntu-24.04-arm
    steps:
      - name: Check e2e matrix results
        run: |
          # Check the overall result of the e2e job (which includes all matrix jobs)
          result="${{ needs.e2e.result }}"
          echo "E2E job result: $result"
          if [ "$result" == "success" ]; then
            echo "All e2e matrix jobs succeeded"
            exit 0
          else
            echo "One or more e2e matrix jobs failed or were cancelled"
            exit 1
          fi

  # Benchmark job runs on PRs and pushes to main
  benchmark:
    if: github.event_name == 'pull_request' || (github.event_name == 'push' && github.ref == 'refs/heads/main') || github.event_name == 'workflow_dispatch'
    runs-on: ubuntu-24.04-arm
    permissions:
      contents: write
      deployments: write
      pull-requests: write
    steps:
      - uses: actions/checkout@v5
        with:
          fetch-depth: 0
          filter: tree:0

      - uses: ./.github/actions/set-nx-shas

      - uses: ./.github/actions/setup-node-and-install

      # Download previous benchmark result from cache (if exists)
      - name: Download previous benchmark data
        uses: actions/cache@v4
        with:
          path: ./cache
          key: ${{ runner.os }}-benchmark

      # Run all benchmark tests using Nx task
      - name: Run micro-benchmarks
        shell: bash
        run: |
          # Skip cache to ensure fresh benchmark results and capture all output
          npx nx benchmark workspace --skip-nx-cache 2>&1 | tee benchmark-output.txt
          # Strip ANSI escape codes, extract benchmark result lines, and convert to benchmark.js format
          # jest-bench format: "name  ops/sec  time ± percent %  (runs runs sampled)"
          # benchmark.js format: "name x ops/sec ±percent% (runs runs sampled)"
          sed 's/\x1B\[[0-9;]*m//g' benchmark-output.txt | \
            grep -E "ops/sec" | \
            sed -E 's/^(.+) +([0-9,]+) +ops\/sec +[0-9.]+ [μm]?s +± +([0-9.]+) +% +\(([0-9]+) runs sampled\)/\1 x \2 ops\/sec ±\3% (\4 runs sampled)/' \
            > benchmark-results.txt
          # Verify the file has content
          if [ ! -s benchmark-results.txt ]; then
            echo "ERROR: benchmark-results.txt is empty or doesn't exist!"
            exit 1
          fi
          echo "Successfully extracted $(wc -l < benchmark-results.txt) benchmark results"

      - name: Continuous Benchmark
        uses: benchmark-action/github-action-benchmark@v1
        with:
          name: Move-File Generator Benchmarks
          tool: 'benchmarkjs'
          output-file-path: benchmark-results.txt
          github-token: ${{ secrets.GITHUB_TOKEN }}
          # Store benchmark data in external JSON file
          external-data-json-path: ./cache/benchmark-data.json
          # Disable GitHub Pages integration
          save-data-file: true
          skip-fetch-gh-pages: true
          alert-threshold: '110%'
          comment-on-alert: true
          fail-on-alert: true
          alert-comment-cc-users: '@LayZeeDK'
          summary-always: true

  # Summary check for benchmark job for branch protection
  check-benchmark:
    needs: benchmark
    if: always()
    runs-on: ubuntu-24.04-arm
    steps:
      - name: Check benchmark results
        run: |
          # Check the overall result of the benchmark job
          result="${{ needs.benchmark.result }}"
          echo "Benchmark job result: $result"
          if [ "$result" == "success" ]; then
            echo "Benchmark job succeeded"
            exit 0
          elif [ "$result" == "skipped" ]; then
            echo "Benchmark job was skipped"
            exit 0
          else
            echo "Benchmark job failed or was cancelled"
            exit 1
          fi

  # Determine the GitHub runner image matrix for the e2e-benchmark job based on event type
  # PRs use only Ubuntu ARM for faster feedback
  # Push to main and workflow_dispatch use all 3 platforms for comprehensive testing
  set-e2e-benchmark-matrix:
    if: github.event_name == 'pull_request' || (github.event_name == 'push' && github.ref == 'refs/heads/main') || github.event_name == 'workflow_dispatch'
    runs-on: ubuntu-24.04-arm
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
    env:
      # `include` as in `matrix.strategy.include`
      MATRIX_FAST: |
        include:
          - os: ubuntu-24.04-arm
            name: Ubuntu ARM64
      MATRIX_FULL: |
        include:
          - os: macos-latest
            name: macOS
          - os: windows-latest
            name: Windows
          - os: ubuntu-24.04-arm
            name: Ubuntu ARM64
    steps:
      - id: set-matrix
        name: Set matrix output property
        shell: bash
        run: |
          # Set the matrix output property

          # Fail the step on the first error and propagate pipeline failures
          set -eo pipefail

          # Select the matrix YAML based on event type
          if [[ "$GITHUB_EVENT_NAME" == "pull_request" ]]; then
            printf '%s\n' "$MATRIX_FAST" > matrix.yml
          else
            printf '%s\n' "$MATRIX_FULL" > matrix.yml
          fi

          # Convert the chosen YAML matrix to JSON using js-yaml so the e2e-benchmark job can consume it
          MATRIX_JSON=$(npx --yes js-yaml matrix.yml | tr -d '\n')
          # Publish the JSON matrix via step outputs for downstream jobs
          echo "matrix=$MATRIX_JSON" >> "$GITHUB_OUTPUT"

  # E2E benchmark job runs on PRs and pushes to main across multiple platforms
  e2e-benchmark:
    needs:
      - build
      - set-e2e-benchmark-matrix
    if: github.event_name == 'pull_request' || (github.event_name == 'push' && github.ref == 'refs/heads/main') || github.event_name == 'workflow_dispatch'
    timeout-minutes: 90
    strategy:
      fail-fast: false
      matrix: ${{ fromJson(needs.set-e2e-benchmark-matrix.outputs.matrix) }}
    runs-on: ${{ matrix.os }}
    permissions:
      contents: write
      deployments: write
      pull-requests: write
    steps:
      - uses: actions/checkout@v5
        with:
          fetch-depth: 0
          filter: tree:0

      - uses: ./.github/actions/set-nx-shas

      - uses: ./.github/actions/setup-node-and-install

      - name: Download build artifacts
        id: download-artifacts
        uses: actions/download-artifact@v4
        continue-on-error: true
        with:
          name: build-artifacts
          path: dist/

      # Download previous benchmark result from cache (if exists)
      - name: Download previous benchmark data
        uses: actions/cache@v4
        with:
          path: ./cache
          key: ${{ runner.os }}-e2e-benchmark-${{ matrix.name }}

      # Run all E2E benchmark tests using Nx task
      - name: Run E2E benchmarks
        shell: bash
        run: |
          # Skip cache to ensure fresh benchmark results and capture all output
          npx nx e2e-benchmark workspace-e2e --skip-nx-cache 2>&1 | tee e2e-benchmark-output.txt
          # Strip ANSI escape codes, extract benchmark result lines, and convert to benchmark.js format
          # jest-bench format: "name  ops/sec  time ± percent %  (runs runs sampled)"
          # benchmark.js format: "name x ops/sec ±percent% (runs runs sampled)"
          sed 's/\x1B\[[0-9;]*m//g' e2e-benchmark-output.txt | \
            grep -E "ops/sec" | \
            sed -E 's/^(.+) +([0-9,]+) +ops\/sec +[0-9.]+ [μm]?s +± +([0-9.]+) +% +\(([0-9]+) runs sampled\)/\1 x \2 ops\/sec ±\3% (\4 runs sampled)/' \
            > e2e-benchmark-results.txt
          # Verify the file has content
          if [ ! -s e2e-benchmark-results.txt ]; then
            echo "ERROR: e2e-benchmark-results.txt is empty or doesn't exist!"
            exit 1
          fi
          echo "Successfully extracted $(wc -l < e2e-benchmark-results.txt) E2E benchmark results"

      # Store and compare benchmark results with 10% threshold
      - name: Continuous Benchmark - E2E Performance (${{ matrix.name }})
        uses: benchmark-action/github-action-benchmark@v1
        with:
          name: E2E Performance Benchmarks - ${{ matrix.name }}
          tool: 'benchmarkjs'
          output-file-path: e2e-benchmark-results.txt
          github-token: ${{ secrets.GITHUB_TOKEN }}
          external-data-json-path: ./cache/e2e-benchmark-data-${{ matrix.name }}.json
          save-data-file: true
          skip-fetch-gh-pages: true
          alert-threshold: '110%'
          comment-on-alert: true
          fail-on-alert: true
          alert-comment-cc-users: '@LayZeeDK'
          summary-always: true

  # Summary check that aggregates all e2e-benchmark matrix results for branch protection
  check-e2e-benchmark:
    needs: e2e-benchmark
    if: always()
    runs-on: ubuntu-24.04-arm
    steps:
      - name: Check e2e-benchmark matrix results
        run: |
          # Check the overall result of the e2e-benchmark job (which includes all matrix jobs)
          result="${{ needs.e2e-benchmark.result }}"
          echo "E2E Benchmark job result: $result"
          if [ "$result" == "success" ]; then
            echo "All e2e-benchmark matrix jobs succeeded"
            exit 0
          elif [ "$result" == "skipped" ]; then
            echo "E2E Benchmark job was skipped"
            exit 0
          else
            echo "One or more e2e-benchmark matrix jobs failed or were cancelled"
            exit 1
          fi
