name: Claude Code

on:
  workflow_dispatch:
    inputs:
      target_issue:
        description: 'Issue or PR number to work on'
        required: false
        type: string
      instruction:
        description: 'Custom instruction for Claude (optional)'
        required: false
        type: string
  issue_comment:
    types: [created]
  pull_request_review_comment:
    types: [created]
  issues:
    types: [opened, labeled]
  pull_request:
    types: [labeled]
  pull_request_review:
    types: [submitted]

jobs:
  claude:
    # Security: Only allow trusted users to trigger Claude Code workflows
    #
    # Pattern: (workflow_dispatch OR github.event.sender.type == 'User') AND (one of the event scenarios below)
    #
    # Each event scenario checks:
    #   1. Correct event type (workflow_dispatch, issue_comment, pull_request_review_comment, issues, pull_request, etc.)
    #   2. Body contains '@claude' mention OR 'claude' label is applied OR manual dispatch
    #   3. Author/commenter is trusted (MEMBER, OWNER, or COLLABORATOR)
    #
    # Supported triggers:
    #   - Manual workflow dispatch (requires write access to repository)
    #   - Comments on issues/PRs with '@claude' mention
    #   - Pull request reviews with '@claude' mention
    #   - Issues opened with '@claude' in title/body
    #   - 'claude' label applied to issues or pull requests
    #
    # Security Controls:
    #   - Manual dispatch: GitHub requires write access to trigger workflow_dispatch, ensuring only
    #     trusted users (Members, Collaborators, Owners) can manually invoke Claude.
    #   - Label triggers: GitHub Actions does not expose the label applier's author_association.
    #     Security relies on repository settings restricting label permissions to trusted users
    #     (Members, Collaborators, Owners). Ensure only trusted users have triage or write access.
    #   - Branch protection: The workflow validates that commits are only pushed to non-main branches.
    #     Attempts to push to main/master or the default branch will fail the workflow.
    #   - Required branch protection rules: Ensure the main branch has protections enabled to prevent
    #     force pushes and require pull request reviews.
    #
    # This prevents external/untrusted users from triggering workflows with write permissions
    # that could potentially push commits, modify PRs, or change issues.
    if: |
      github.event_name == 'workflow_dispatch' ||
      (
        github.event.sender.type == 'User' &&
        (
          github.event_name == 'issue_comment' &&
          contains(github.event.comment.body, '@claude') &&
          (github.event.comment.author_association == 'MEMBER' ||
           github.event.comment.author_association == 'OWNER' ||
           github.event.comment.author_association == 'COLLABORATOR')
        ) ||
        (
          github.event_name == 'pull_request_review_comment' &&
          contains(github.event.comment.body, '@claude') &&
          (github.event.comment.author_association == 'MEMBER' ||
           github.event.comment.author_association == 'OWNER' ||
           github.event.comment.author_association == 'COLLABORATOR')
        ) ||
        (
          github.event_name == 'pull_request_review' &&
          contains(github.event.review.body, '@claude') &&
          (github.event.review.author_association == 'MEMBER' ||
           github.event.review.author_association == 'OWNER' ||
           github.event.review.author_association == 'COLLABORATOR')
        ) ||
        (
          github.event_name == 'issues' &&
          (contains(github.event.issue.body, '@claude') || contains(github.event.issue.title, '@claude')) &&
          (github.event.issue.author_association == 'MEMBER' ||
           github.event.issue.author_association == 'OWNER' ||
           github.event.issue.author_association == 'COLLABORATOR')
        ) ||
        (
          github.event_name == 'issues' &&
          github.event.action == 'labeled' &&
          github.event.label.name == 'claude' &&
          (github.event.issue.author_association == 'MEMBER' ||
           github.event.issue.author_association == 'OWNER' ||
           github.event.issue.author_association == 'COLLABORATOR')
        ) ||
        (
          github.event_name == 'pull_request' &&
          github.event.action == 'labeled' &&
          github.event.label.name == 'claude' &&
          (github.event.pull_request.author_association == 'MEMBER' ||
           github.event.pull_request.author_association == 'OWNER' ||
           github.event.pull_request.author_association == 'COLLABORATOR')
        )
      )
    concurrency:
      # Prevent multiple Claude instances from running simultaneously
      # Strategy:
      #   - PR events: One Claude run per PR (using PR number)
      #   - Issue events: One Claude run per issue (using issue number)
      #   - workflow_dispatch: One Claude run per branch (using branch name)
      #   - Manual dispatch with target_issue: Joins the queue for that issue/PR
      group: claude-${{ github.event.inputs.target_issue || github.event.pull_request.number || github.event.issue.number || github.ref_name }}
      # Do not cancel in-progress runs; queue new requests instead
      cancel-in-progress: false
    runs-on: ubuntu-latest
    permissions:
      contents: write # Required for Claude to push commits (restricted to non-main branches)
      pull-requests: write # Required for Claude to create comments on PRs
      issues: write # Required for Claude to create comments on issues
      id-token: write
      actions: read # Required for Claude to read CI results on PRs
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 1

      - name: Prevent commits to main branch
        run: |
          CURRENT_BRANCH="${GITHUB_HEAD_REF:-${GITHUB_REF#refs/heads/}}"
          DEFAULT_BRANCH="${{ github.event.repository.default_branch }}"
          echo "Current branch: $CURRENT_BRANCH"
          echo "Default branch: $DEFAULT_BRANCH"

          if [ "$CURRENT_BRANCH" = "$DEFAULT_BRANCH" ] || [ "$CURRENT_BRANCH" = "main" ] || [ "$CURRENT_BRANCH" = "master" ]; then
            echo "❌ Error: Claude cannot push commits to the main branch ($CURRENT_BRANCH)"
            echo "This workflow only allows commits to non-main branches for security."
            echo "Please work on a feature branch instead."
            exit 1
          fi

          echo "✅ Branch check passed: Working on non-main branch ($CURRENT_BRANCH)"

      - name: Validate workflow_dispatch inputs
        if: github.event_name == 'workflow_dispatch'
        run: |
          # Validate target_issue is a number if provided
          if [ -n "${{ github.event.inputs.target_issue }}" ]; then
            if ! [[ "${{ github.event.inputs.target_issue }}" =~ ^[0-9]+$ ]]; then
              echo "❌ Error: target_issue must be a number"
              echo "Provided value: '${{ github.event.inputs.target_issue }}'"
              exit 1
            fi
            echo "✅ target_issue validation passed: ${{ github.event.inputs.target_issue }}"
          fi

          # Validate instruction doesn't contain shell metacharacters that could be used for injection
          if [ -n "${{ github.event.inputs.instruction }}" ]; then
            # Check for dangerous shell metacharacters
            if [[ "${{ github.event.inputs.instruction }}" =~ [\$\`\;] ]]; then
              echo "❌ Error: instruction contains potentially dangerous characters"
              echo "The following characters are not allowed: $ \` ;"
              exit 1
            fi
            echo "✅ instruction validation passed"
          fi

      - name: Build custom prompt for workflow_dispatch
        if: github.event_name == 'workflow_dispatch'
        id: build_prompt
        run: |
          PROMPT=""
          if [ -n "${{ github.event.inputs.target_issue }}" ]; then
            PROMPT="Please work on issue/PR #${{ github.event.inputs.target_issue }}."
          fi
          if [ -n "${{ github.event.inputs.instruction }}" ]; then
            if [ -n "$PROMPT" ]; then
              PROMPT="$PROMPT "
            fi
            PROMPT="${PROMPT}${{ github.event.inputs.instruction }}"
          fi
          echo "prompt=$PROMPT" >> $GITHUB_OUTPUT

      - name: Run Claude Code
        id: claude
        uses: anthropics/claude-code-action@v1
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          claude_code_oauth_token: ${{ secrets.CLAUDE_CODE_OAUTH_TOKEN }}

          # This is an optional setting that allows Claude to read CI results on PRs
          additional_permissions: |
            actions: read

          # Use custom prompt from workflow_dispatch if provided
          # Otherwise, Claude will perform the instructions specified in the comment that tagged it
          prompt: ${{ steps.build_prompt.outputs.prompt || '' }}

          # Optional: Add claude_args to customize behavior and configuration
          # See https://github.com/anthropics/claude-code-action/blob/main/docs/usage.md
          # or https://docs.claude.com/en/docs/claude-code/cli-reference for available options
          claude_args: |
            --allowed-tools '
              WebSearch,
              WebFetch(domain:github.com),
              WebFetch(domain:nx.dev),
              Bash(npm install),
              Bash(npm run:*),
              Bash(npx nx:*),
              Bash(gh auth status),
              Bash(gh help),
              Bash(gh version),
              Bash(gh status),
              Bash(gh repo list nx-worker --limit 100),
              Bash(gh repo view nx-worker/nxworker-workspace --json name,description,visibility,defaultBranchRef,archived,isTemplate),
              Bash(gh issue list --repo nx-worker/nxworker-workspace --state all --limit 100),
              Bash(gh issue view:*),
              Bash(gh issue status --repo nx-worker/nxworker-workspace),
              Bash(gh issue comment:*),
              Bash(gh issue edit:*),
              Bash(gh issue close:*),
              Bash(gh pr list --repo nx-worker/nxworker-workspace --state all --limit 100),
              Bash(gh pr view --repo nx-worker/nxworker-workspace --json number,title,state,author,baseRefName,headRefName,mergeable:*),
              Bash(gh pr diff --repo nx-worker/nxworker-workspace:*),
              Bash(gh pr checks --repo nx-worker/nxworker-workspace:*),
              Bash(gh pr comment:*),
              Bash(gh pr edit:*),
              Bash(gh pr ready:*),
              Bash(gh release list --repo nx-worker/nxworker-workspace --limit 50),
              Bash(gh release view --repo nx-worker/nxworker-workspace --json tagName,name,publishedAt,url:*),
              Bash(gh workflow list --repo nx-worker/nxworker-workspace --limit 50),
              Bash(gh workflow view --repo nx-worker/nxworker-workspace --json name,path,state,createdAt,updatedAt:*),
              Bash(gh run list --repo nx-worker/nxworker-workspace --limit 50),
              Bash(gh run view --repo nx-worker/nxworker-workspace --json databaseId,displayTitle,status,conclusion,workflowName,createdAt,updatedAt:*),
              Bash(gh run rerun:*),
              Bash(gh workflow run:*),
              Bash(gh search repos --limit 50 --json name,owner,description,stargazersCount:*),
              Bash(gh search issues --limit 50 --json number,title,state,repository,author:*),
              Bash(gh search prs --limit 50 --json number,title,state,repository,author:*),
              Bash(gh search code --limit 50:*),
              Bash(gh api --method GET /repos/nx-worker/nxworker-workspace),
              Bash(gh api --method GET /repos/nx-worker/nxworker-workspace/issues/:*),
              Bash(gh api --method GET /repos/nx-worker/nxworker-workspace/pulls/:*),
              Bash(gh extension list),
              Bash(gh alias list)
            '
            --mcp-config '{
              "mcpServers": {
                "nx": {
                  "type": "stdio",
                  "command": "npx",
                  "args": ["-y", "nx-mcp@latest"]
                }
              }
            }'
