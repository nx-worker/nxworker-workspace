name: Claude Code
#
# Permission Documentation
# =======================
#
# This workflow has multiple jobs with different permission requirements:
#
# Setup Jobs (create branches and PRs):
# - issue-opened-setup: contents:write, issues:write, pull-requests:write
# - issue-labeled-setup: contents:write, issues:write, pull-requests:write
#
# Execution Jobs (call reusable workflow):
# - manual-dispatch-run: actions:read, contents:write, issues:write, pull-requests:write, id-token:write
# - issue-comment-run: actions:read, contents:write, issues:write, pull-requests:write, id-token:write
# - pr-review-comment: actions:read, contents:write, issues:write, pull-requests:write, id-token:write
# - pr-review: actions:read, contents:write, issues:write, pull-requests:write, id-token:write
# - issue-opened-run: actions:read, contents:write, issues:write, pull-requests:write, id-token:write
# - issue-labeled-run: actions:read, contents:write, issues:write, pull-requests:write, id-token:write
# - pr-labeled: actions:read, contents:write, issues:write, pull-requests:write, id-token:write
#
# Check Jobs (read-only or no permissions needed):
# - manual-dispatch: No explicit permissions (validation only)
# - issue-comment-check: No explicit permissions (uses GitHub API with GITHUB_TOKEN)
# - pr-labeled-check: No explicit permissions (uses GitHub API with GITHUB_TOKEN)
#
# Reusable Workflow (claude-run-reusable.yml):
# - run: contents:write, pull-requests:write, issues:write, id-token:write, actions:read
#
# Permission Explanations:
# - contents:write: Required to push commits and create branches
# - issues:write: Required to create/update issue comments
# - pull-requests:write: Required to create/update PRs and PR comments
# - actions:read: Required to access workflow run information
# - id-token:write: Required for OIDC authentication with external services
#

on:
  workflow_dispatch:
    inputs:
      target_issue:
        description: 'Issue or PR number to work on'
        required: false
        type: string
      instruction:
        description: 'Custom instruction for Claude (optional)'
        required: false
        type: string
  issue_comment:
    types: [created]
  pull_request_review_comment:
    types: [created]
  issues:
    types: [opened, labeled]
  pull_request:
    types: [labeled]
  pull_request_review:
    types: [submitted]

jobs:
  # Job 1: Manual workflow dispatch
  # Security: GitHub requires write access to trigger workflow_dispatch
  # Permissions: None (validation only, no GitHub API calls)
  manual-dispatch:
    if: github.event_name == 'workflow_dispatch'
    runs-on: ubuntu-24.04-arm
    outputs:
      prompt: ${{ steps.build_prompt.outputs.prompt }}
    steps:
      - name: Validate inputs
        run: |
          # Validate target_issue is a number if provided
          if [ -n "${{ github.event.inputs.target_issue }}" ]; then
            if ! [[ "${{ github.event.inputs.target_issue }}" =~ ^[0-9]+$ ]]; then
              echo "❌ Error: target_issue must be a number"
              exit 1
            fi
          fi

          # Validate instruction doesn't contain shell metacharacters
          if [ -n "${{ github.event.inputs.instruction }}" ]; then
            if [[ "${{ github.event.inputs.instruction }}" =~ [\$\`\;\|\&\>\<\(\)\{\ }$'\n'] ]]; then
              echo "❌ Error: instruction contains potentially dangerous characters"
              exit 1
            fi
          fi

      - name: Build custom prompt
        id: build_prompt
        run: |
          PROMPT=""
          if [ -n "${{ github.event.inputs.target_issue }}" ]; then
            PROMPT="Please work on issue/PR #${{ github.event.inputs.target_issue }}."
          fi
          INSTRUCTION="${{ github.event.inputs.instruction }}"
          if [ -n "$INSTRUCTION" ]; then
            if [ -n "$PROMPT" ]; then
              PROMPT="$PROMPT "
            fi
            PROMPT="${PROMPT}${INSTRUCTION}"
          fi
          echo "prompt=$PROMPT" >> $GITHUB_OUTPUT

  # Job 1b: Execute Claude for manual workflow dispatch
  # Permissions:
  #   - actions:read: Access workflow run information
  #   - contents:write: Push commits to repository
  #   - issues:write: Create/update issue comments
  #   - pull-requests:write: Create/update PRs and PR comments
  #   - id-token:write: OIDC authentication with Claude Code service
  manual-dispatch-run:
    needs: manual-dispatch
    permissions:
      actions: read
      contents: write
      issues: write
      pull-requests: write
      id-token: write
    uses: ./.github/workflows/claude-run-reusable.yml
    with:
      issue_number: ${{ github.event.inputs.target_issue }}
      custom_prompt: ${{ needs.manual-dispatch.outputs.prompt }}
      checkout_ref: ${{ github.ref }}
      skip_branch_check: false
    secrets:
      CLAUDE_CODE_OAUTH_TOKEN: ${{ secrets.CLAUDE_CODE_OAUTH_TOKEN }}

  # Job 2: Comment on issue with @claude mention (handles both PR and standalone issue)
  # Security: Only trusted members can trigger
  # Permissions: None (uses GITHUB_TOKEN with default permissions for API calls)
  issue-comment-check:
    if: |
      github.event_name == 'issue_comment' &&
      github.event.sender.type == 'User' &&
      github.event.sender.login != 'copilot' &&
      github.event.sender.login != 'claude' &&
      !endsWith(github.event.sender.login, '[bot]') &&
      contains(github.event.comment.body, '@claude') &&
      !contains(github.event.comment.body, '@copilot') &&
      (github.event.comment.author_association == 'MEMBER' ||
       github.event.comment.author_association == 'OWNER' ||
       github.event.comment.author_association == 'COLLABORATOR')
    runs-on: ubuntu-24.04-arm
    outputs:
      is_pr: ${{ steps.check.outputs.is_pr }}
      head_ref: ${{ steps.check.outputs.head_ref }}
    steps:
      - name: Check if comment is on PR
        id: check
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          if [ -n "${{ github.event.issue.pull_request }}" ]; then
            echo "is_pr=true" >> $GITHUB_OUTPUT
            PR_DATA=$(gh api /repos/${{ github.repository }}/pulls/${{ github.event.issue.number }})
            HEAD_REF=$(echo "$PR_DATA" | jq -r '.head.ref')
            echo "head_ref=$HEAD_REF" >> $GITHUB_OUTPUT
          else
            echo "is_pr=false" >> $GITHUB_OUTPUT
            echo "head_ref=" >> $GITHUB_OUTPUT
          fi

  # Job 2b: Execute Claude for issue/PR comments
  # Permissions:
  #   - actions:read: Access workflow run information
  #   - contents:write: Push commits to repository
  #   - issues:write: Create/update issue comments
  #   - pull-requests:write: Create/update PRs and PR comments
  #   - id-token:write: OIDC authentication with Claude Code service
  issue-comment-run:
    needs: issue-comment-check
    permissions:
      actions: read
      contents: write
      issues: write
      pull-requests: write
      id-token: write
    uses: ./.github/workflows/claude-run-reusable.yml
    with:
      issue_number: ${{ github.event.issue.number }}
      custom_prompt: ''
      checkout_ref: ${{ needs.issue-comment-check.outputs.head_ref }}
      skip_branch_check: ${{ needs.issue-comment-check.outputs.is_pr != 'true' }}
    secrets:
      CLAUDE_CODE_OAUTH_TOKEN: ${{ secrets.CLAUDE_CODE_OAUTH_TOKEN }}

  # Job 3: PR review comment with @claude mention
  # Security: Only trusted members can trigger
  # Permissions:
  #   - actions:read: Access workflow run information
  #   - contents:write: Push commits to repository
  #   - issues:write: Create/update issue comments
  #   - pull-requests:write: Create/update PRs and PR comments
  #   - id-token:write: OIDC authentication with Claude Code service
  pr-review-comment:
    if: |
      github.event_name == 'pull_request_review_comment' &&
      github.event.sender.type == 'User' &&
      github.event.sender.login != 'copilot' &&
      github.event.sender.login != 'claude' &&
      !endsWith(github.event.sender.login, '[bot]') &&
      contains(github.event.comment.body, '@claude') &&
      !contains(github.event.comment.body, '@copilot') &&
      (github.event.comment.author_association == 'MEMBER' ||
       github.event.comment.author_association == 'OWNER' ||
       github.event.comment.author_association == 'COLLABORATOR')
    permissions:
      actions: read
      contents: write
      issues: write
      pull-requests: write
      id-token: write
    uses: ./.github/workflows/claude-run-reusable.yml
    with:
      issue_number: ${{ github.event.pull_request.number }}
      custom_prompt: ''
      checkout_ref: ${{ github.event.pull_request.head.ref }}
      skip_branch_check: false
    secrets:
      CLAUDE_CODE_OAUTH_TOKEN: ${{ secrets.CLAUDE_CODE_OAUTH_TOKEN }}

  # Job 4: PR review with @claude mention
  # Security: Only trusted members can trigger
  # Permissions:
  #   - actions:read: Access workflow run information
  #   - contents:write: Push commits to repository
  #   - issues:write: Create/update issue comments
  #   - pull-requests:write: Create/update PRs and PR comments
  #   - id-token:write: OIDC authentication with Claude Code service
  pr-review:
    if: |
      github.event_name == 'pull_request_review' &&
      github.event.sender.type == 'User' &&
      github.event.sender.login != 'copilot' &&
      github.event.sender.login != 'claude' &&
      !endsWith(github.event.sender.login, '[bot]') &&
      contains(github.event.review.body, '@claude') &&
      !contains(github.event.review.body, '@copilot') &&
      (github.event.review.author_association == 'MEMBER' ||
       github.event.review.author_association == 'OWNER' ||
       github.event.review.author_association == 'COLLABORATOR')
    permissions:
      actions: read
      contents: write
      issues: write
      pull-requests: write
      id-token: write
    uses: ./.github/workflows/claude-run-reusable.yml
    with:
      issue_number: ${{ github.event.pull_request.number }}
      custom_prompt: ''
      checkout_ref: ${{ github.event.pull_request.head.ref }}
      skip_branch_check: false
    secrets:
      CLAUDE_CODE_OAUTH_TOKEN: ${{ secrets.CLAUDE_CODE_OAUTH_TOKEN }}

  # Job 5: Issue opened with @claude in title or body
  # Security: Only trusted members can trigger
  # Permissions:
  #   - contents:write: Create and push branch for the issue
  #   - issues:write: Create issue comments
  #   - pull-requests:write: Create PR for the issue
  issue-opened-setup:
    if: |
      github.event_name == 'issues' &&
      github.event.action == 'opened' &&
      github.event.sender.type == 'User' &&
      (contains(github.event.issue.body, '@claude') || contains(github.event.issue.title, '@claude')) &&
      (github.event.issue.author_association == 'MEMBER' ||
       github.event.issue.author_association == 'OWNER' ||
       github.event.issue.author_association == 'COLLABORATOR')
    runs-on: ubuntu-24.04-arm
    permissions:
      contents: write
      issues: write
      pull-requests: write
    outputs:
      branch_name: ${{ steps.create_branch.outputs.branch_name }}
      pr_number: ${{ steps.create_pr.outputs.pr_number }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 1

      - name: Create branch and PR
        id: create_branch
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          # Sanitize issue title for branch name
          ISSUE_TITLE="${{ github.event.issue.title }}"
          # Convert to lowercase, replace spaces/special chars with hyphens, limit length
          SANITIZED_TITLE=$(echo "$ISSUE_TITLE" | tr '[:upper:]' '[:lower:]' | sed 's/[^a-z0-9-]/-/g' | sed 's/--*/-/g' | sed 's/^-//' | sed 's/-$//' | cut -c1-50)
          BRANCH_NAME="claude/issue-${{ github.event.issue.number }}-${SANITIZED_TITLE}"

          echo "branch_name=$BRANCH_NAME" >> $GITHUB_OUTPUT

          # Configure git
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"

          # Create new branch
          git checkout -b "$BRANCH_NAME"

          # Create empty commit
          git commit --allow-empty -m "chore: initialize branch for issue #${{ github.event.issue.number }}"

          # Push branch
          git push origin "$BRANCH_NAME"

      - name: Ensure automated label exists
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          # Check if automated label exists, create it if not
          if ! gh label list | grep -q "^automated"; then
            gh label create "automated" --color "ededed" --description "Automated PR created by Claude workflow"
          fi

      - name: Create PR
        id: create_pr
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          # Create PR with placeholder content
          PR_TITLE="🤖 Claude: ${{ github.event.issue.title }}"
          PR_BODY="Automated PR created by Claude to work on issue #${{ github.event.issue.number }}

          ## Issue
          ${{ github.event.issue.title }}

          ## Prompt
          ${{ format('Please work on issue #{0}: {1}', github.event.issue.number, github.event.issue.title) }}

          ---
          _This PR was automatically created by the Claude workflow. Claude will update this PR with the implementation._"

          PR_NUMBER=$(gh pr create \
            --title "$PR_TITLE" \
            --body "$PR_BODY" \
            --base "${{ github.event.repository.default_branch }}" \
            --head "${{ steps.create_branch.outputs.branch_name }}" \
            --label "claude" \
            --label "automated" | grep -oP '(?<=pull/)[0-9]+')

          echo "pr_number=$PR_NUMBER" >> $GITHUB_OUTPUT

          # Link PR to issue
          gh issue comment ${{ github.event.issue.number }} --body "🤖 Claude is working on this issue in PR #$PR_NUMBER"

  # Job 5b: Execute Claude for opened issues
  # Permissions:
  #   - actions:read: Access workflow run information
  #   - contents:write: Push commits to repository
  #   - issues:write: Create/update issue comments
  #   - pull-requests:write: Create/update PRs and PR comments
  #   - id-token:write: OIDC authentication with Claude Code service
  issue-opened-run:
    needs: issue-opened-setup
    permissions:
      actions: read
      contents: write
      issues: write
      pull-requests: write
      id-token: write
    uses: ./.github/workflows/claude-run-reusable.yml
    with:
      issue_number: ${{ needs.issue-opened-setup.outputs.pr_number }}
      custom_prompt: "${{ format('Please work on issue #{0}: {1}', github.event.issue.number, github.event.issue.title) }}"
      checkout_ref: ${{ needs.issue-opened-setup.outputs.branch_name }}
      skip_branch_check: false
    secrets:
      CLAUDE_CODE_OAUTH_TOKEN: ${{ secrets.CLAUDE_CODE_OAUTH_TOKEN }}

  # Job 6: Issue labeled with 'claude'
  # Security: Relies on repository settings restricting label permissions to trusted users
  # Permissions:
  #   - contents:write: Create and push branch for the issue
  #   - issues:write: Create issue comments
  #   - pull-requests:write: Create PR for the issue
  issue-labeled-setup:
    if: |
      github.event_name == 'issues' &&
      github.event.action == 'labeled' &&
      github.event.label.name == 'claude' &&
      github.event.sender.type == 'User'
    runs-on: ubuntu-24.04-arm
    permissions:
      contents: write
      issues: write
      pull-requests: write
    outputs:
      branch_name: ${{ steps.create_branch.outputs.branch_name }}
      pr_number: ${{ steps.create_pr.outputs.pr_number }}
    steps:
      - name: Verify sender permissions
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          # Verify the sender has write or admin permission
          PERMISSION=$(gh api /repos/${{ github.repository }}/collaborators/${{ github.event.sender.login }}/permission | jq -r '.permission')

          if [[ "$PERMISSION" != "admin" && "$PERMISSION" != "write" ]]; then
            echo "❌ Error: User ${{ github.event.sender.login }} does not have sufficient permissions (permission: $PERMISSION)"
            echo "Only users with write or admin access can trigger Claude via labels"
            exit 1
          fi

          echo "✅ Permission check passed: ${{ github.event.sender.login }} has $PERMISSION permission"

      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 1

      - name: Create branch and PR
        id: create_branch
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          # Sanitize issue title for branch name
          ISSUE_TITLE="${{ github.event.issue.title }}"
          # Convert to lowercase, replace spaces/special chars with hyphens, limit length
          SANITIZED_TITLE=$(echo "$ISSUE_TITLE" | tr '[:upper:]' '[:lower:]' | sed 's/[^a-z0-9-]/-/g' | sed 's/--*/-/g' | sed 's/^-//' | sed 's/-$//' | cut -c1-50)
          BRANCH_NAME="claude/issue-${{ github.event.issue.number }}-${SANITIZED_TITLE}"

          echo "branch_name=$BRANCH_NAME" >> $GITHUB_OUTPUT

          # Configure git
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"

          # Create new branch
          git checkout -b "$BRANCH_NAME"

          # Create empty commit
          git commit --allow-empty -m "chore: initialize branch for issue #${{ github.event.issue.number }}"

          # Push branch
          git push origin "$BRANCH_NAME"

      - name: Ensure automated label exists
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          # Check if automated label exists, create it if not
          if ! gh label list | grep -q "^automated"; then
            gh label create "automated" --color "ededed" --description "Automated PR created by Claude workflow"
          fi

      - name: Create PR
        id: create_pr
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          # Create PR with placeholder content
          PR_TITLE="🤖 Claude: ${{ github.event.issue.title }}"
          PR_BODY="Automated PR created by Claude to work on issue #${{ github.event.issue.number }}

          ## Issue
          ${{ github.event.issue.title }}

          ## Prompt
          ${{ format('Please work on issue #{0}: {1}', github.event.issue.number, github.event.issue.title) }}

          ---
          _This PR was automatically created by the Claude workflow. Claude will update this PR with the implementation._"

          PR_NUMBER=$(gh pr create \
            --title "$PR_TITLE" \
            --body "$PR_BODY" \
            --base "${{ github.event.repository.default_branch }}" \
            --head "${{ steps.create_branch.outputs.branch_name }}" \
            --label "claude" \
            --label "automated" | grep -oP '(?<=pull/)[0-9]+')

          echo "pr_number=$PR_NUMBER" >> $GITHUB_OUTPUT

          # Link PR to issue
          gh issue comment ${{ github.event.issue.number }} --body "🤖 Claude is working on this issue in PR #$PR_NUMBER"

  # Job 6b: Execute Claude for labeled issues
  # Permissions:
  #   - actions:read: Access workflow run information
  #   - contents:write: Push commits to repository
  #   - issues:write: Create/update issue comments
  #   - pull-requests:write: Create/update PRs and PR comments
  #   - id-token:write: OIDC authentication with Claude Code service
  issue-labeled-run:
    needs: issue-labeled-setup
    permissions:
      actions: read
      contents: write
      issues: write
      pull-requests: write
      id-token: write
    uses: ./.github/workflows/claude-run-reusable.yml
    with:
      issue_number: ${{ needs.issue-labeled-setup.outputs.pr_number }}
      custom_prompt: "${{ format('Please work on issue #{0}: {1}', github.event.issue.number, github.event.issue.title) }}"
      checkout_ref: ${{ needs.issue-labeled-setup.outputs.branch_name }}
      skip_branch_check: false
    secrets:
      CLAUDE_CODE_OAUTH_TOKEN: ${{ secrets.CLAUDE_CODE_OAUTH_TOKEN }}

  # Job 7: PR labeled with 'claude' - permission verification
  # Security: Relies on repository settings restricting label permissions to trusted users
  # Permissions: None (uses GITHUB_TOKEN with default permissions for API calls)
  pr-labeled-check:
    if: |
      github.event_name == 'pull_request' &&
      github.event.action == 'labeled' &&
      github.event.label.name == 'claude' &&
      github.event.sender.type == 'User'
    runs-on: ubuntu-24.04-arm
    steps:
      - name: Verify sender permissions
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          # Verify the sender has write or admin permission
          PERMISSION=$(gh api /repos/${{ github.repository }}/collaborators/${{ github.event.sender.login }}/permission | jq -r '.permission')

          if [[ "$PERMISSION" != "admin" && "$PERMISSION" != "write" ]]; then
            echo "❌ Error: User ${{ github.event.sender.login }} does not have sufficient permissions (permission: $PERMISSION)"
            echo "Only users with write or admin access can trigger Claude via labels"
            exit 1
          fi

          echo "✅ Permission check passed: ${{ github.event.sender.login }} has $PERMISSION permission"

  # Job 7b: Execute Claude for labeled PRs
  # Permissions:
  #   - actions:read: Access workflow run information
  #   - contents:write: Push commits to repository
  #   - issues:write: Create/update issue comments
  #   - pull-requests:write: Create/update PRs and PR comments
  #   - id-token:write: OIDC authentication with Claude Code service
  pr-labeled:
    needs: pr-labeled-check
    permissions:
      actions: read
      contents: write
      issues: write
      pull-requests: write
      id-token: write
    uses: ./.github/workflows/claude-run-reusable.yml
    with:
      issue_number: ${{ github.event.pull_request.number }}
      custom_prompt: "${{ format('Please work on PR #{0}: {1}', github.event.pull_request.number, github.event.pull_request.title) }}"
      checkout_ref: ${{ github.event.pull_request.head.ref }}
      skip_branch_check: false
    secrets:
      CLAUDE_CODE_OAUTH_TOKEN: ${{ secrets.CLAUDE_CODE_OAUTH_TOKEN }}
