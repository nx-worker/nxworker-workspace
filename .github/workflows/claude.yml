name: Claude Code

on:
  issue_comment:
    types: [created]
  pull_request_review_comment:
    types: [created]
  issues:
    types: [opened, assigned, labeled]
  pull_request:
    types: [labeled]
  pull_request_review:
    types: [submitted]

jobs:
  claude:
    # Security: Only allow trusted users to trigger Claude Code workflows
    #
    # Pattern: github.event.sender.type == 'User' AND (one of the event scenarios below)
    #
    # Each event scenario checks:
    #   1. Correct event type (issue_comment, pull_request_review_comment, issues, pull_request, etc.)
    #   2. Body contains '@claude' mention OR 'claude' label is applied
    #   3. Author is trusted (MEMBER, OWNER, or COLLABORATOR)
    #
    # Supported triggers:
    #   - Comments on issues/PRs with '@claude' mention
    #   - Pull request reviews with '@claude' mention
    #   - Issues opened/assigned with '@claude' in title/body
    #   - 'claude' label assigned to issues or pull requests
    #
    # This prevents external/untrusted users from triggering workflows with write permissions
    # that could potentially push commits, modify PRs, or change issues.
    if: |
      github.event.sender.type == 'User' &&
      (
        (
          github.event_name == 'issue_comment' &&
          contains(github.event.comment.body, '@claude') &&
          (github.event.comment.author_association == 'MEMBER' ||
           github.event.comment.author_association == 'OWNER' ||
           github.event.comment.author_association == 'COLLABORATOR')
        ) ||
        (
          github.event_name == 'pull_request_review_comment' &&
          contains(github.event.comment.body, '@claude') &&
          (github.event.comment.author_association == 'MEMBER' ||
           github.event.comment.author_association == 'OWNER' ||
           github.event.comment.author_association == 'COLLABORATOR')
        ) ||
        (
          github.event_name == 'pull_request_review' &&
          contains(github.event.review.body, '@claude') &&
          (github.event.review.author_association == 'MEMBER' ||
           github.event.review.author_association == 'OWNER' ||
           github.event.review.author_association == 'COLLABORATOR')
        ) ||
        (
          github.event_name == 'issues' &&
          (contains(github.event.issue.body, '@claude') || contains(github.event.issue.title, '@claude')) &&
          (github.event.issue.author_association == 'MEMBER' ||
           github.event.issue.author_association == 'OWNER' ||
           github.event.issue.author_association == 'COLLABORATOR')
        ) ||
        (
          github.event_name == 'issues' &&
          github.event.action == 'labeled' &&
          github.event.label.name == 'claude' &&
          (github.event.sender.type == 'User') &&
          (github.event.issue.author_association == 'MEMBER' ||
           github.event.issue.author_association == 'OWNER' ||
           github.event.issue.author_association == 'COLLABORATOR')
        ) ||
        (
          github.event_name == 'pull_request' &&
          github.event.action == 'labeled' &&
          github.event.label.name == 'claude' &&
          (github.event.sender.type == 'User') &&
          (github.event.pull_request.author_association == 'MEMBER' ||
           github.event.pull_request.author_association == 'OWNER' ||
           github.event.pull_request.author_association == 'COLLABORATOR')
        )
      )
    runs-on: ubuntu-latest
    permissions:
      contents: write # Required for Claude to push commits
      pull-requests: write # Required for Claude to create comments on PRs
      issues: write # Required for Claude to create comments on issues
      id-token: write
      actions: read # Required for Claude to read CI results on PRs
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 1

      - name: Run Claude Code
        id: claude
        uses: anthropics/claude-code-action@v1
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          claude_code_oauth_token: ${{ secrets.CLAUDE_CODE_OAUTH_TOKEN }}

          # This is an optional setting that allows Claude to read CI results on PRs
          additional_permissions: |
            actions: read

          # Optional: Give a custom prompt to Claude. If this is not specified, Claude will perform the instructions specified in the comment that tagged it.
          # prompt: 'Update the pull request description to include a summary of changes.'

          # Optional: Add claude_args to customize behavior and configuration
          # See https://github.com/anthropics/claude-code-action/blob/main/docs/usage.md
          # or https://docs.claude.com/en/docs/claude-code/cli-reference for available options
          claude_args: |
            --allowed-tools '
              Bash(npm install),
              Bash(npm run:*),
              Bash(npx nx:*),
              Bash(gh auth status),
              Bash(gh help),
              Bash(gh version),
              Bash(gh status),
              Bash(gh repo list nx-worker --limit 100),
              Bash(gh repo view nx-worker/nxworker-workspace --json name,description,visibility,defaultBranchRef,archived,isTemplate),
              Bash(gh issue list --repo nx-worker/nxworker-workspace --state all --limit 100),
              Bash(gh issue view:*),
              Bash(gh issue status --repo nx-worker/nxworker-workspace),
              Bash(gh issue comment:*),
              Bash(gh issue edit:*),
              Bash(gh issue close:*),
              Bash(gh pr list --repo nx-worker/nxworker-workspace --state all --limit 100),
              Bash(gh pr view --repo nx-worker/nxworker-workspace --json number,title,state,author,baseRefName,headRefName,mergeable:*),
              Bash(gh pr diff --repo nx-worker/nxworker-workspace:*),
              Bash(gh pr checks --repo nx-worker/nxworker-workspace:*),
              Bash(gh pr comment:*),
              Bash(gh pr edit:*),
              Bash(gh pr ready:*),
              Bash(gh release list --repo nx-worker/nxworker-workspace --limit 50),
              Bash(gh release view --repo nx-worker/nxworker-workspace --json tagName,name,publishedAt,url:*),
              Bash(gh workflow list --repo nx-worker/nxworker-workspace --limit 50),
              Bash(gh workflow view --repo nx-worker/nxworker-workspace --json name,path,state,createdAt,updatedAt:*),
              Bash(gh run list --repo nx-worker/nxworker-workspace --limit 50),
              Bash(gh run view --repo nx-worker/nxworker-workspace --json databaseId,displayTitle,status,conclusion,workflowName,createdAt,updatedAt:*),
              Bash(gh run rerun:*),
              Bash(gh workflow run:*),
              Bash(gh search repos --limit 50 --json name,owner,description,stargazersCount:*),
              Bash(gh search issues --limit 50 --json number,title,state,repository,author:*),
              Bash(gh search prs --limit 50 --json number,title,state,repository,author:*),
              Bash(gh search code --limit 50:*),
              Bash(gh api --method GET /repos/nx-worker/nxworker-workspace),
              Bash(gh api --method GET /repos/nx-worker/nxworker-workspace/issues/:*),
              Bash(gh api --method GET /repos/nx-worker/nxworker-workspace/pulls/:*),
              Bash(gh extension list),
              Bash(gh alias list)'
            --mcp-config '{
              "mcpServers": {
                "nx": {
                  "type": "stdio",
                  "command": "npx",
                  "args": ["-y", "nx-mcp@latest"]
                }
              }
            }'
