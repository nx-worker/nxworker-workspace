name: Claude Run (Reusable)
#
# Permission Documentation
# =======================
#
# This reusable workflow is called by multiple jobs in claude.yml
#
# Job: run
# Permissions:
#   - contents:write: Push commits to the repository
#   - pull-requests:write: Create/update PRs and PR comments
#   - issues:write: Create/update issue comments
#   - id-token:write: OIDC authentication with Claude Code service
#   - actions:read: Access workflow run information
#
# These permissions are required for Claude Code to:
# 1. Check out the repository
# 2. Make code changes and commit them
# 3. Push commits to the PR branch
# 4. Update PR descriptions and comments
# 5. Reply to issue/PR comments
# 6. Authenticate with the Claude Code service via OIDC
#

# Reusable workflow for running Claude Code with shared configuration
# Called by claude.yml with different trigger contexts

on:
  workflow_call:
    inputs:
      skip_branch_check:
        description: 'Skip the branch check (for issue-based triggers where Claude creates the branch)'
        required: false
        type: boolean
        default: false
      checkout_ref:
        description: 'Git ref to checkout (branch name, PR head ref, etc.)'
        required: false
        type: string
      issue_number:
        description: 'Issue or PR number for concurrency grouping'
        required: false
        type: string
      custom_prompt:
        description: 'Custom prompt for Claude'
        required: false
        type: string
    secrets:
      CLAUDE_CODE_OAUTH_TOKEN:
        required: true

jobs:
  # Main execution job for Claude Code
  # Permissions:
  #   - contents:write: Push commits to repository
  #   - pull-requests:write: Create/update PRs and PR comments
  #   - issues:write: Create/update issue comments
  #   - id-token:write: OIDC authentication with Claude Code service
  #   - actions:read: Access workflow run information
  run:
    runs-on: ubuntu-24.04-arm
    concurrency:
      group: claude-${{ inputs.issue_number || github.ref_name }}
      cancel-in-progress: false
    permissions:
      contents: write
      pull-requests: write
      issues: write
      id-token: write
      actions: read
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          # We need to fetch all branches and commits so that Nx affected has a base to compare against.
          fetch-depth: 0
          filter: tree:0 # Optional, but recommended: reduce the size of the checkout with tree filtering, see https://github.blog/open-source/git/get-up-to-speed-with-partial-clone-and-shallow-clone/
          ref: ${{ inputs.checkout_ref || github.ref }}
          token: ${{ github.token }}

      - name: Prevent commits to main branch
        if: ${{ !inputs.skip_branch_check }}
        run: |
          # Get the actual checked-out branch name
          CURRENT_BRANCH=$(git rev-parse --abbrev-ref HEAD)
          DEFAULT_BRANCH="${{ github.event.repository.default_branch }}"

          if [ "$CURRENT_BRANCH" = "$DEFAULT_BRANCH" ] || [ "$CURRENT_BRANCH" = "main" ] || [ "$CURRENT_BRANCH" = "master" ]; then
            echo "❌ Error: Claude cannot push commits to the main branch ($CURRENT_BRANCH)"
            exit 1
          fi

          echo "✅ Branch check passed: Working on non-main branch ($CURRENT_BRANCH)"

      - name: Install Git pre-push hook
        run: |
          DEFAULT_BRANCH="${{ github.event.repository.default_branch }}"

          cat > .git/hooks/pre-push << EOF
          #!/bin/sh
          DEFAULT_BRANCH="$DEFAULT_BRANCH"

          while read local_ref local_sha remote_ref remote_sha; do
            branch=\$(echo "\$remote_ref" | sed 's/refs\/heads\///')
            if [ "\$branch" = "main" ] || [ "\$branch" = "master" ] || [ "\$branch" = "\$DEFAULT_BRANCH" ]; then
              echo "❌ Error: pre-push hook blocked push to protected branch: \$branch"
              exit 1
            fi
          done
          exit 0
          EOF

          chmod +x .git/hooks/pre-push

      - name: Set Nx SHAs
        uses: ./.github/actions/set-nx-shas

      - name: Set up Node.js and install packages
        uses: ./.github/actions/setup-node-and-install

      - name: Build Claude prompt
        id: build_prompt
        run: |
          # Build system prompt
          {
            echo 'SYSTEM_PROMPT<<EOF'
            echo 'You are an autonomous coding assistant running in a GitHub Actions workflow. Your role is to:'
            echo ''
            echo '1. **Work autonomously** - Complete the given task independently without asking for clarification'
            echo '2. **Push your commits** - Always push your commits using `git push` when you finish working on a task'
            echo '3. **Report via GitHub CLI** - Use `gh pr comment` to post updates and completion status to the PR'
            echo '4. **Handle errors gracefully** - If you encounter permission errors, report them via PR comments'
            echo ''
            echo '## Workflow Guidelines'
            echo ''
            echo '- Make focused, incremental commits with clear commit messages'
            echo '- After completing your work, push all commits: `git push origin <branch-name>`'
            echo '- Post a summary comment to the PR when done: `gh pr comment <pr-number> --body "✅ Completed: <summary>"`'
            echo '- Follow the repository conventions in AGENTS.md and other documentation'
            echo '- Run linters, formatters, and tests as appropriate for the changes'
            echo ''
            echo '## Permission Denied Handling'
            echo ''
            echo 'If you encounter a permission denied or tool not allowed error, post a comment with:'
            echo ''
            echo '```'
            echo '## Permission Denied'
            echo ''
            echo '**Command:** `<command>`'
            echo '**Intent:** <what you were trying to accomplish>'
            echo '**Task:** <the specific task you were working on>'
            echo '**Context:** <additional context>'
            echo '```'
            echo 'EOF'
          } >> $GITHUB_OUTPUT

          # Build user prompt
          {
            echo 'CLAUDE_PROMPT<<EOF'
            
            # Add custom prompt if provided
            if [ -n "${{ inputs.custom_prompt }}" ]; then
              echo '${{ inputs.custom_prompt }}'
            fi
            
            echo 'EOF'
          } >> $GITHUB_OUTPUT

      - name: Run Claude Code
        uses: anthropics/claude-code-action@v1
        with:
          github_token: ${{ github.token }}
          claude_code_oauth_token: ${{ secrets.CLAUDE_CODE_OAUTH_TOKEN }}
          additional_permissions: |
            actions: read
          prompt: ${{ steps.build_prompt.outputs.CLAUDE_PROMPT }}
          claude_args: |
            --system '${{ steps.build_prompt.outputs.SYSTEM_PROMPT }}'
            --allowed-tools '
              Read,
              Grep,
              Edit,
              MultiEdit,
              Write,
              LS,
              mcp:nx:*,
              WebSearch,
              WebFetch(domain:github.com),
              WebFetch(domain:nx.dev),
              Bash(git log:*),
              Bash(git status),
              Bash(git diff:*),
              Bash(git add:*),
              Bash(git commit:*),
              Bash(git push:*),
              Bash(git reset:*),
              Bash(git checkout:*),
              Bash(git branch:*),
              Bash(git show:*),
              Bash(git remote:*),
              Bash(git fetch:*),
              Bash(git tag:*),
              Bash(git stash:*),
              Bash(git config --get:*),
              Bash(git config --list),
              Bash(pwd),
              Bash(find:*),
              Bash(cat:*),
              Bash(head:*),
              Bash(tail:*),
              Bash(wc:*),
              Bash(sort:*),
              Bash(uniq:*),
              Bash(tree:*),
              Bash(which:*),
              Bash(mkdir:*),
              Bash(mv:*),
              Bash(cp:*),
              Bash(touch:*),
              Bash(sed:*),
              Bash(awk:*),
              Bash(cut:*),
              Bash(node:*),
              Bash(python:*),
              Bash(python3:*),
              Bash(npm install),
              Bash(npm run:*),
              Bash(npx nx:*),
              Bash(gh auth status),
              Bash(gh help),
              Bash(gh version),
              Bash(gh status),
              Bash(gh repo list nx-worker --limit 100),
              Bash(gh repo view nx-worker/nxworker-workspace --json name,description,visibility,defaultBranchRef,archived,isTemplate),
              Bash(gh issue list --repo nx-worker/nxworker-workspace --state all --limit 100),
              Bash(gh issue view:*),
              Bash(gh issue status --repo nx-worker/nxworker-workspace),
              Bash(gh issue comment:*),
              Bash(gh issue edit:*),
              Bash(gh issue close:*),
              Bash(gh pr list --repo nx-worker/nxworker-workspace --state all --limit 100),
              Bash(gh pr view --repo nx-worker/nxworker-workspace --json number,title,state,author,baseRefName,headRefName,mergeable:*),
              Bash(gh pr diff --repo nx-worker/nxworker-workspace:*),
              Bash(gh pr checks --repo nx-worker/nxworker-workspace:*),
              Bash(gh pr comment:*),
              Bash(gh pr edit:*),
              Bash(gh pr ready:*),
              Bash(gh release list --repo nx-worker/nxworker-workspace --limit 50),
              Bash(gh release view --repo nx-worker/nxworker-workspace --json tagName,name,publishedAt,url:*),
              Bash(gh workflow list --repo nx-worker/nxworker-workspace --limit 50),
              Bash(gh workflow view --repo nx-worker/nxworker-workspace --json name,path,state,createdAt,updatedAt:*),
              Bash(gh run list --repo nx-worker/nxworker-workspace --limit 50),
              Bash(gh run view --repo nx-worker/nxworker-workspace --json databaseId,displayTitle,status,conclusion,workflowName,createdAt,updatedAt:*),
              Bash(gh run rerun:*),
              Bash(gh workflow run:*),
              Bash(gh search repos --limit 50 --json name,owner,description,stargazersCount:*),
              Bash(gh search issues --limit 50 --json number,title,state,repository,author:*),
              Bash(gh search prs --limit 50 --json number,title,state,repository,author:*),
              Bash(gh search code --limit 50:*),
              Bash(gh api --method GET /repos/nx-worker/nxworker-workspace),
              Bash(gh api --method GET /repos/nx-worker/nxworker-workspace/issues/:*),
              Bash(gh api --method GET /repos/nx-worker/nxworker-workspace/pulls/:*),
              Bash(gh extension list),
              Bash(gh alias list)
            '
            --mcp-config '{
              "mcpServers": {
                "nx": {
                  "type": "stdio",
                  "command": "npx",
                  "args": ["-y", "nx-mcp@latest"]
                }
              }
            }'
